openapi: 3.0.0
info:
  title: Products Service API
  version: 1.0.0
  description: API documentation for the Products service.
servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /products:
    post:
      summary: Create a new product
      requestBody:
        description: Product data to create a new product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request (invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                examples:
                  EmptyFields:
                    value:
                      error: "invalid product"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Get all products
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of products per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request (invalid product ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                examples:
                  EmptyProductID:
                    value:
                      error: "no product id"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated product data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: product updated successfully
        '400':
          description: Bad request (invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                examples:
                  EmptyFields:
                    value:
                      error: "invalid product"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product deleted successfully
        '400':
          description: Bad request (invalid product ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                examples:
                  EmptyProductID:
                    value:
                      error: "no product id"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/purchase:
    post:
      summary: Purchase a product
      requestBody:
        description: Purchase request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseReq'
      responses:
        '200':
          description: Purchase successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaEvent'
        '400':
          description: Bad request (invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                examples:
                  EmptyProductID:
                    value:
                      error: "no product id"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          example: 60af88359f1b2c001ce44a34
        name:
          type: string
          example: Sample Product
        price:
          type: string
          example: 19.99

    CreateProduct:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          example: Sample Product
        price:
          type: string
          example: 19.99

    PurchaseReq:
      type: object
      required:
        - product_id
      properties:
        product_id:
          type: array
          items:
            type: string
          example: ["60af88359f1b2c001ce44a34"]

    KafkaEvent:
      type: object
      properties:
        user_id:
          type: string
          example: "1"
        product_id:
          type: array
          items:
            type: string
          example: ["60af88359f1b2c001ce44a34"]

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: An error occurred
